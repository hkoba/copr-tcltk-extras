--- tclreadline-2.1.0/tclreadlineCompleter.tcl.orig	2014-02-07 17:24:58.409499701 +0900
+++ tclreadline-2.1.0/tclreadlineCompleter.tcl	2014-02-07 17:29:52.199242757 +0900
@@ -625,6 +625,12 @@
 			}
 		}
 	}
+
+    if {[isSnitObj $cmd]} {
+		set result [SnitObj ${text} ${start} ${end} ${line} ${pos}]
+		return 1
+    }
+
 	if {![catch {set type [image type ${cmd}]}]} {
 		switch -- ${type} {
 			photo {
@@ -3298,8 +3304,8 @@
 				first -
 				last { return [DisplayHints <string1>] }
 
-				map { return [CompleteFromList ${text} {-nocase <charMap>]} }
-				match { return [CompleteFromList ${text} {-nocase <pattern>]} }
+			    map { return [CompleteFromList ${text} {-nocase <charMap>}] }
+			    match { return [CompleteFromList ${text} {-nocase <pattern>}] }
 
 				is {
 					return [CompleteFromList ${text} {
@@ -6660,6 +6666,69 @@
 	}
 }
 
+proc isSnitObj cmd {
+	expr {[namespace exists ::snit]
+		  && ![catch {namespace ensemble exists $cmd}]
+		  && [lsearch [namespace ensemble configure $cmd -unknown] ::snit::*]
+		  >= 0}
+}
+
+proc SnitObj {text start end line pos} {
+    set obj [Lindex ${line} 0]
+    set prev [PreviousWord ${start} ${line}]
+    set methods [$obj info methods]
+    if {$pos == 1} {
+	return [CompleteFromList ${text} $methods]
+    } else {
+	set prefix [Lrange $line 1 $pos]
+	set match [filter-submethods $methods $prefix]
+	if {[llength $match] == 1
+	    && [string equal \
+		    -length [string length [set meth [lindex $match 0]]]\
+		    $meth $prefix]} {
+	    # puts stderr [list meth $meth pos $pos text $text]
+	    if {$pos <= [llength $meth]+1 && $text eq ""} {
+		return [DisplayHints <[$obj info args $meth]>]
+	    } else {
+		return ""
+	    }
+	} elseif {[llength $match]} {
+	    set trim [trim-submethods $match $prefix]
+	    set res [CompleteFromList ${text} $trim]
+	    # puts stderr [list prefix $prefix match $match trim $trim res $res]
+	    return $res
+	} else {
+	    # argument 
+	    return ""
+	}
+    }
+}
+
+proc filter-submethods {methods prefix} {
+    set result {}
+    set plen [string length $prefix]
+    foreach m $methods {
+	if {[string equal -length [expr {min($plen,[string length $m])}] \
+		 $m $prefix]} {
+	    lappend result $m
+	}
+    }
+    # puts stderr [list filtered: match $result methods $methods prefix $prefix]
+    set result
+}
+
+proc trim-submethods {methods prefix} {
+    set result {}
+    foreach m $methods {
+	if {[llength $m] == [llength $prefix]} {
+	    lappend result [lindex $m end]
+	} else {
+	    lappend result [lrange $m [llength $prefix] end]
+	}
+    }
+    set result
+}
+
 proc PhotoObj {text start end line pos} {
 	set sub [Lindex ${line} 1]
 	set prev [PreviousWord ${start} ${line}]
