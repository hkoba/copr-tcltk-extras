diff --git a/generic/api.c b/generic/api.c
index 5319e21..f311553 100644
--- a/generic/api.c
+++ b/generic/api.c
@@ -31,10 +31,10 @@ int JSON_NewJNumberObj(Tcl_Interp* interp, Tcl_Obj* number, Tcl_Obj** new) //{{{
 int JSON_NewJBooleanObj(Tcl_Interp* interp, Tcl_Obj* boolean, Tcl_Obj** new) //{{{
 {
 	struct interp_cx*	l = Tcl_GetAssocData(interp, "rl_json", NULL);
-	int					bool;
+	int					bool_;
 
-	TEST_OK(Tcl_GetBooleanFromObj(interp, boolean, &bool));
-	replace_tclobj(new, bool ? l->json_true : l->json_false);
+	TEST_OK(Tcl_GetBooleanFromObj(interp, boolean, &bool_));
+	replace_tclobj(new, bool_ ? l->json_true : l->json_false);
 
 	return TCL_OK;
 }
@@ -302,7 +302,7 @@ int JSON_SetJArrayObj(Tcl_Interp* interp, Tcl_Obj* obj, const int objc, Tcl_Obj*
 }
 
 //}}}
-int JSON_JArrayObjGetElements(Tcl_Interp* interp, Tcl_Obj* arrayObj, int* objc, Tcl_Obj*** objv) //{{{
+int JSON_JArrayObjGetElements(Tcl_Interp* interp, Tcl_Obj* arrayObj, Tcl_Size* objc, Tcl_Obj*** objv) //{{{
 {
 	enum json_types	type;
 	Tcl_Obj*		val = NULL;
@@ -392,7 +392,7 @@ int JSON_Extract(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj* path, Tcl_Obj** res)
 	Tcl_Obj*	target = NULL;
 	Tcl_Obj**	pathv = NULL;
 	Tcl_Obj*	def = NULL;
-	int			pathc = 0;
+	Tcl_Size	pathc = 0;
 
 	if (path)
 		TEST_OK_LABEL(finally, code, Tcl_ListObjGetElements(interp, path, &pathc, &pathv));
@@ -418,7 +418,7 @@ int JSON_Exists(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj* path, int* exists) //
 {
 	Tcl_Obj*			target = NULL;
 	Tcl_Obj**			pathv = NULL;
-	int					pathc = 0;
+	Tcl_Size			pathc = 0;
 
 	if (path)
 		TEST_OK(Tcl_ListObjGetElements(interp, path, &pathc, &pathv));
@@ -451,7 +451,7 @@ int JSON_Set(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj *path, Tcl_Obj* replaceme
 	Tcl_Obj*			newval;
 	Tcl_Obj*			rep = NULL;
 	Tcl_Obj**			pathv = NULL;
-	int					pathc = 0;
+	Tcl_Size			pathc = 0;
 
 	if (Tcl_IsShared(obj))
 		THROW_ERROR_LABEL(finally, code, "JSON_Set called with shared object");
@@ -498,7 +498,8 @@ int JSON_Set(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj *path, Tcl_Obj* replaceme
 				//}}}
 			case JSON_ARRAY: //{{{
 				{
-					int			ac, index_str_len, ok=1;
+					Tcl_Size	ac, index_str_len;
+                    int			ok=1;
 					long		index;
 					const char*	index_str;
 					char*		end;
@@ -658,7 +659,7 @@ int JSON_Unset(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj *path) //{{{
 	Tcl_Obj*		step = NULL;
 	Tcl_Obj*		src = NULL;
 	Tcl_Obj*		target = NULL;
-	int				pathc = 0;
+	Tcl_Size		pathc = 0;
 	Tcl_Obj**		pathv = NULL;
 	int				retval = TCL_OK;
 
@@ -711,7 +712,8 @@ int JSON_Unset(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj *path) //{{{
 				//}}}
 			case JSON_ARRAY: //{{{
 				{
-					int			ac, index_str_len, ok=1;
+					Tcl_Size	ac, index_str_len;
+                    int			ok=1;
 					long		index;
 					const char*	index_str;
 					char*		end;
@@ -809,7 +811,8 @@ int JSON_Unset(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj *path) //{{{
 			//}}}
 		case JSON_ARRAY: //{{{
 			{
-				int			ac, index_str_len, ok=1;
+				Tcl_Size	ac, index_str_len;
+                int			ok=1;
 				long		index;
 				const char*	index_str;
 				char*		end;
@@ -1024,7 +1027,7 @@ int JSON_Type(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj* path, enum json_types*
 }
 
 //}}}
-int JSON_Length(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj* path, int* length) //{{{
+int JSON_Length(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj* path, Tcl_Size* length) //{{{
 {
 	enum json_types	type;
 	int				retval = TCL_OK;
@@ -1126,7 +1129,7 @@ int JSON_Foreach(Tcl_Interp* interp, Tcl_Obj* iterators, JSON_ForeachBody* body,
 	unsigned int			i;
 	int						retcode=TCL_OK;
 	struct foreach_state*	state = NULL;
-	int						objc;
+	Tcl_Size				objc;
 	Tcl_Obj**				objv = NULL;
 	Tcl_Obj*				it_res = NULL;
 	struct interp_cx*		l = Tcl_GetAssocData(interp, "rl_json", NULL);
@@ -1173,7 +1176,8 @@ int JSON_Foreach(Tcl_Interp* interp, Tcl_Obj* iterators, JSON_ForeachBody* body,
 	}
 
 	for (i=0; i<state->iterators; i++) {
-		int				loops, j;
+		Tcl_Size		loops;
+        int				j;
 		enum json_types	type;
 		Tcl_Obj*		val = NULL;
 		Tcl_Obj*		varlist = objv[i*2];
@@ -1318,7 +1322,8 @@ cleanup_search:
 											break;
 											//}}}
 										} else { // Iterate over it_res as a list {{{
-											int			oc, i;
+											Tcl_Size	oc;
+                                            int			i;
 											Tcl_Obj**	ov = NULL;
 
 											TEST_OK_LABEL(done, retcode, Tcl_ListObjGetElements(interp, it_res, &oc, &ov));
@@ -1385,7 +1390,7 @@ int JSON_Valid(Tcl_Interp* interp, Tcl_Obj* json, int* valid, enum extensions ex
 	const unsigned char*	p;
 	const unsigned char*	e;
 	const unsigned char*	val_start;
-	int						len;
+	Tcl_Size				len;
 	struct parse_context	cx[CX_STACK_SIZE];
 
 	if (interp)
diff --git a/generic/cbor.c b/generic/cbor.c
index d7dfe90..dc1787d 100644
--- a/generic/cbor.c
+++ b/generic/cbor.c
@@ -519,7 +519,7 @@ static int cbor_match_map(Tcl_Interp* interp, uint8_t ai, uint64_t val, const ui
 	Tcl_Obj*		cbor_val = NULL;
 	Tcl_HashTable	remaining;
 	const uint8_t*	p = *pPtr;
-	int				size;
+	Tcl_Size			size;
 	int				skipping = 0;
 
 	Tcl_InitHashTable(&remaining, TCL_ONE_WORD_KEYS);
@@ -709,7 +709,7 @@ data_item: // loop: read off tags
 		//}}}
 		case M_BSTR: // Compare as byte strings {{{
 		{
-			size_t				pathlen;
+			Tcl_Size		pathlen;
 			const uint8_t*		pathval = (const uint8_t*)Tcl_GetBytesFromObj(interp, pathElem, &pathlen);
 			const uint8_t*const	pathend = pathval + pathlen;
 			const uint8_t*const	pe = p + val;
@@ -768,7 +768,7 @@ data_item: // loop: read off tags
 		//}}}
 		case M_UTF8: // Compare as UTF-8 strings {{{
 		{
-			int					s_pathlen;
+			Tcl_Size		s_pathlen;
 			const uint8_t*		s_pathval = (const uint8_t*)Tcl_GetStringFromObj(pathElem, &s_pathlen);
 			const uint8_t*const	s_pathend = s_pathval + s_pathlen;
 			const uint8_t*const	s_pe = p + val;
@@ -837,7 +837,7 @@ data_item: // loop: read off tags
 		//}}}
 		case M_ARR:  // Compare as a list {{{
 		{
-			int			oc;
+			Tcl_Size	oc;
 			Tcl_Obj**	ov;
 			if (TCL_OK != Tcl_ListObjGetElements(NULL, pathElem, &oc, &ov)) {
 				// Skip remaining elements {{{
@@ -919,7 +919,7 @@ data_item: // loop: read off tags
 				}
 				case 22: case 23:	// Simple value: null / undefined - treat zero length string as matching
 				{
-					int len;
+					Tcl_Size len;
 					Tcl_GetStringFromObj(pathElem, &len);
 					if (len == 0) goto matches;
 					goto mismatch;
@@ -959,9 +959,9 @@ int CBOR_GetDataItemFromPath(Tcl_Interp* interp, Tcl_Obj* cborObj, Tcl_Obj* path
 {
 	int						code = TCL_OK;
 	Tcl_Obj**				pathv = NULL;
-	int						pathc = 0;
+	Tcl_Size					pathc = 0;
 	const uint8_t*			p = NULL;
-	size_t					byteslen = 0;
+	Tcl_Size					byteslen = 0;
 	const uint8_t*			bytes = NULL;
 	const uint8_t**			circular = g_circular_buf;
 
@@ -1253,7 +1253,7 @@ static int cbor_nr_cmd(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj*c
 			enum {A_cmd=A_OP, A_BYTES, A_objc};
 			CHECK_ARGS_LABEL(finally, code, "bytes");
 
-			int				len;
+			Tcl_Size			len;
 			const uint8_t*	bytes = Tcl_GetByteArrayFromObj(objv[A_BYTES], &len);
 			const uint8_t*	p = bytes;
 
diff --git a/generic/json_types.c b/generic/json_types.c
index 23a0936..60d79ec 100644
--- a/generic/json_types.c
+++ b/generic/json_types.c
@@ -298,7 +298,7 @@ int JSON_SetIntRep(Tcl_Obj* target, enum json_types type, Tcl_Obj* replacement)
 	replace_tclobj(&rep, replacement);
 
 	if (type == JSON_STRING && rep) { // Check for template values
-		int					len;
+		Tcl_Size			len;
 		const char*			str = Tcl_GetStringFromObj(replacement, &len);
 		const char*const	strend = str + len;
 		enum json_types		template_type;
@@ -437,7 +437,7 @@ static void dup_internal_rep(Tcl_Obj* src, Tcl_Obj* dest, Tcl_ObjType* objtype)
 		Tcl_Panic("dup_internal_rep asked to duplicate for type, but that type wasn't available on the src object");
 
 	if (src == srcir->twoPtrValue.ptr1) {
-		int			len;
+		Tcl_Size	len;
 		const char*	str = Tcl_GetStringFromObj((Tcl_Obj*)srcir->twoPtrValue.ptr1, &len);
 		// Don't know how this happens yet, but it's bad news - we get into an endless recursion of duplicateobj calls until the stack blows up
 
@@ -446,7 +446,7 @@ static void dup_internal_rep(Tcl_Obj* src, Tcl_Obj* dest, Tcl_ObjType* objtype)
 	} else {
 		if (objtype == &json_array) {
 			Tcl_Obj**	ov = NULL;
-			int			oc;
+			Tcl_Size	oc;
 			// The list type's internal structure sharing on duplicates messes up our sharing,
 			// rather recreate a fresh list referencing the original element objects instead
 			if (TCL_OK != Tcl_ListObjGetElements(NULL, srcir->twoPtrValue.ptr1, &oc, &ov))
@@ -516,7 +516,7 @@ static void update_string_rep_number(Tcl_Obj* obj) //{{{
 {
 	Tcl_ObjInternalRep*	ir = Tcl_FetchInternalRep(obj, &json_number);
 	const char*			str;
-	int					len;
+	Tcl_Size			len;
 
 	if (ir->twoPtrValue.ptr1 == obj)
 		Tcl_Panic("Turtles all the way down!");
@@ -590,7 +590,7 @@ static int set_from_any(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_ObjType** objtype,
 	const unsigned char*	p;
 	const unsigned char*	e;
 	const unsigned char*	val_start;
-	int						len;
+	Tcl_Size				len;
 	struct parse_context	cx[CX_STACK_SIZE];
 	enum extensions			extensions = EXT_COMMENTS;
 	struct parse_error		details = {0};
diff --git a/generic/rl_json.c b/generic/rl_json.c
index 904647d..c6afc55 100644
--- a/generic/rl_json.c
+++ b/generic/rl_json.c
@@ -237,7 +237,8 @@ display *obj
 
 			if (Tcl_HasStringRep(obj)) { // Has a string rep already, make sure it's not hex or octal, and not padded with whitespace
 				const char* s;
-				int			len, start=0;
+				Tcl_Size len;
+                int			start=0;
 
 				s = Tcl_GetStringFromObj(obj, &len);
 				if (len >= 1 && s[0] == '-')
@@ -316,7 +317,7 @@ display *obj
 //}}}
 static void append_json_string(const struct serialize_context* scx, Tcl_Obj* obj) //{{{
 {
-	int				len;
+	Tcl_Size		len;
 	const char*		chunk;
 	const char*		p;
 	const char*		e;
@@ -394,7 +395,8 @@ static int serialize_json_val(Tcl_Interp* interp, struct serialize_context* scx,
 					// Have to do the template subst here rather than at
 					// parse time since the dict keys would be broken otherwise
 					if (scx->serialize_mode == SERIALIZE_TEMPLATE) {
-						int			len, stype;
+						Tcl_Size	len;
+                        int			stype;
 						const char*	s;
 
 						s = Tcl_GetStringFromObj(k, &len);
@@ -451,7 +453,8 @@ static int serialize_json_val(Tcl_Interp* interp, struct serialize_context* scx,
 			//}}}
 		case JSON_ARRAY: //{{{
 			{
-				int				i, oc, first=1;
+				Tcl_Size		oc;
+                int				i, first=1;
 				Tcl_Obj**		ov;
 				Tcl_Obj*		iv = NULL;
 				enum json_types	v_type = JSON_UNDEF;
@@ -475,7 +478,7 @@ static int serialize_json_val(Tcl_Interp* interp, struct serialize_context* scx,
 		case JSON_NUMBER: //{{{
 			{
 				const char*	bytes;
-				int			len;
+				Tcl_Size	len;
 
 				bytes = Tcl_GetStringFromObj(val, &len);
 				Tcl_DStringAppend(ds, bytes, len);
@@ -645,7 +648,7 @@ int serialize(Tcl_Interp* interp, struct serialize_context* scx, Tcl_Obj* obj) /
 static int get_modifier(Tcl_Interp* interp, Tcl_Obj* modobj, enum modifiers* modifier) //{{{
 {
 	// This must be kept in sync with the modifiers enum
-	static CONST char *modstrings[] = {
+	static const char *modstrings[] = {
 		"",
 		"?length",
 		"?size",
@@ -664,7 +667,8 @@ static int get_modifier(Tcl_Interp* interp, Tcl_Obj* modobj, enum modifiers* mod
 //}}}
 int resolve_path(Tcl_Interp* interp, Tcl_Obj* src, Tcl_Obj *const pathv[], int pathc, Tcl_Obj** target, const int exists, const int modifiers, Tcl_Obj* def) //{{{
 {
-	int					i, modstrlen;
+	int					i;
+    Tcl_Size			modstrlen;
 	enum json_types		type;
 	struct interp_cx*	l = Tcl_GetAssocData(interp, "rl_json", NULL);
 	const char*			modstr;
@@ -715,7 +719,7 @@ int resolve_path(Tcl_Interp* interp, Tcl_Obj* src, Tcl_Obj *const pathv[], int p
 							switch (type) {
 								case JSON_ARRAY:
 									{
-										int			ac;
+										Tcl_Size	ac;
 										Tcl_Obj**	av;
 										TEST_OK_LABEL(done, retval, Tcl_ListObjGetElements(interp, val, &ac, &av));
 										EXISTS(1);
@@ -747,7 +751,7 @@ int resolve_path(Tcl_Interp* interp, Tcl_Obj* src, Tcl_Obj *const pathv[], int p
 								THROW_ERROR_LABEL(done, retval, Tcl_GetString(step), " modifier is not supported for type ", type_names[type]);
 							}
 							{
-								int	size;
+								Tcl_Size	size;
 								TEST_OK_LABEL(done, retval, Tcl_DictObjSize(interp, val, &size));
 								EXISTS(1);
 								replace_tclobj(&t, Tcl_NewIntObj(size));
@@ -820,7 +824,8 @@ int resolve_path(Tcl_Interp* interp, Tcl_Obj* src, Tcl_Obj *const pathv[], int p
 				//}}}
 			case JSON_ARRAY: //{{{
 				{
-					int			ac, index_str_len, ok=1;
+					Tcl_Size	ac, index_str_len;
+                    int			ok=1;
 					long		index;
 					const char*	index_str;
 					char*		end;
@@ -956,7 +961,8 @@ int convert_to_tcl(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj** out) //{{{
 
 		case JSON_ARRAY:
 			{
-				int			i, oc;
+				int			i;
+                Tcl_Size	oc;
 				Tcl_Obj**	ov = NULL;
 				Tcl_Obj*	elem = NULL;
 				Tcl_Obj*	new = NULL;
@@ -1007,8 +1013,9 @@ int convert_to_tcl(Tcl_Interp* interp, Tcl_Obj* obj, Tcl_Obj** out) //{{{
 //}}}
 static int _new_object(Tcl_Interp* interp, int objc, Tcl_Obj *const objv[], Tcl_Obj** res) //{{{
 {
-	int			i, ac, retval=TCL_OK;
-	Tcl_Obj**	av = NULL;
+	int			i, retval=TCL_OK;
+	Tcl_Size	ac;
+    Tcl_Obj**	av = NULL;
 	Tcl_Obj*	new_val = NULL;
 	Tcl_Obj*	val = NULL;
 
@@ -1165,7 +1172,8 @@ cleanup_search:
 									break;
 									//}}}
 								} else { // Iterate over it_res as a list {{{
-									int			oc, i;
+									Tcl_Size	oc;
+                                    int			i;
 									Tcl_Obj**	ov = NULL;
 
 									TEST_OK_LABEL(done, retcode, Tcl_ListObjGetElements(interp, it_res, &oc, &ov));
@@ -1271,7 +1279,8 @@ static int foreach(Tcl_Interp* interp, int objc, Tcl_Obj *const objv[], enum col
 	}
 
 	for (i=0; i<state->iterators; i++) {
-		int				loops, j;
+		Tcl_Size		loops;
+        int				j;
 		enum json_types	type;
 		Tcl_Obj*		val;
 		Tcl_Obj*		varlist = objv[i*2];
@@ -1341,7 +1350,8 @@ done:
 //}}}
 int json_pretty(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, Tcl_Obj* pad, Tcl_DString* ds) //{{{
 {
-	int							pad_len, next_pad_len, count;
+	Tcl_Size					pad_len, next_pad_len;
+    int							count;
 	enum json_types				type;
 	const char*					pad_str;
 	const char*					next_pad_str;
@@ -1363,7 +1373,8 @@ int json_pretty(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, Tcl_Obj* pad
 	switch (type) {
 		case JSON_OBJECT: //{{{
 			{
-				int				done, k_len, max=0, size;
+				int				done, max=0;
+                Tcl_Size		k_len, size;
 				Tcl_DictSearch	search;
 				Tcl_Obj*		k;
 				Tcl_Obj*		v;
@@ -1427,8 +1438,9 @@ int json_pretty(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, Tcl_Obj* pad
 
 		case JSON_ARRAY: //{{{
 			{
-				int			i, oc;
-				Tcl_Obj**	ov;
+				int			i;
+				Tcl_Size	oc;
+                Tcl_Obj**	ov;
 
 				TEST_OK_LABEL(finally, retval, Tcl_ListObjGetElements(interp, val, &oc, &ov));
 
@@ -1469,7 +1481,8 @@ finally:
 //}}}
 static int json_pretty_dbg(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, Tcl_Obj* pad, Tcl_DString* ds) //{{{
 {
-	int							indent_len, pad_len, next_pad_len, count;
+	Tcl_Size					indent_len, pad_len, next_pad_len;
+    int							count;
 	enum json_types				type;
 	const char*					pad_str;
 	const char*					next_pad_str;
@@ -1491,13 +1504,13 @@ static int json_pretty_dbg(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, T
 
 	if (type == JSON_NULL) {
 		Tcl_Obj*	tmp = NULL;
-		replace_tclobj(&tmp, Tcl_ObjPrintf("(0x%lx[%d]/NULL)",
+		replace_tclobj(&tmp, Tcl_ObjPrintf("(0x%lx[%ld]/NULL)",
 						(unsigned long)(ptrdiff_t)json, json->refCount));
 		Tcl_DStringAppend(ds, Tcl_GetString(tmp), -1);
 		release_tclobj(&tmp);
 	} else {
 		Tcl_Obj*	tmp = NULL;
-		replace_tclobj(&tmp, Tcl_ObjPrintf("(0x%lx[%d]/0x%lx[%d] %s)",
+		replace_tclobj(&tmp, Tcl_ObjPrintf("(0x%lx[%ld]/0x%lx[%ld] %s)",
 						(unsigned long)(ptrdiff_t)json, json->refCount,
 						(unsigned long)(ptrdiff_t)val, val->refCount, val->typePtr ? val->typePtr->name : "pure string"));
 		Tcl_DStringAppend(ds, Tcl_GetString(tmp), -1);
@@ -1507,7 +1520,8 @@ static int json_pretty_dbg(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, T
 	switch (type) {
 		case JSON_OBJECT: //{{{
 			{
-				int				done, k_len, max=0, size;
+				int				done, max=0;
+                Tcl_Size		k_len, size;
 				Tcl_DictSearch	search;
 				Tcl_Obj*		k;
 				Tcl_Obj*		v;
@@ -1571,8 +1585,9 @@ static int json_pretty_dbg(Tcl_Interp* interp, Tcl_Obj* json, Tcl_Obj* indent, T
 
 		case JSON_ARRAY: //{{{
 			{
-				int			i, oc;
-				Tcl_Obj**	ov;
+				int			i;
+				Tcl_Size	oc;
+                Tcl_Obj**	ov;
 
 				TEST_OK_LABEL(finally, retval, Tcl_ListObjGetElements(interp, val, &oc, &ov));
 
@@ -1693,7 +1708,8 @@ done:
 #endif
 static int prev_opcode(const struct template_cx *const cx) //{{{
 {
-	int			len, opcode;
+	Tcl_Size	len;
+    int			opcode;
 	Tcl_Obj*	last = NULL;
 
 	TEST_OK(Tcl_ListObjLength(cx->interp, cx->actions, &len));
@@ -1733,7 +1749,8 @@ static int emit_fetches(const struct template_cx *const cx) //{{{
 
 	TEST_OK(Tcl_DictObjFirst(cx->interp, cx->map, &search, &elem, &v, &done));
 	for (; !done; Tcl_DictObjNext(&search, &elem, &v, &done)) {
-		int				len, fetch_idx, types_search_done=0, used_fetch=0;
+		Tcl_Size		len;
+        int		fetch_idx, types_search_done=0, used_fetch=0;
 		Tcl_DictSearch	types_search;
 		Tcl_Obj*		type;
 		Tcl_Obj*		slot;
@@ -1770,7 +1787,7 @@ static int emit_fetches(const struct template_cx *const cx) //{{{
 				case JSON_DYN_LITERAL:
 					{
 						const char*		s;
-						int				len;
+						Tcl_Size		len;
 						enum json_types	type;
 
 						s = Tcl_GetStringFromObj(elem, &len);
@@ -1866,7 +1883,7 @@ static int remove_action(Tcl_Interp* interp, struct template_cx* cx, int idx) //
 {
 	idx *= 3;
 	if (idx < 0) {
-		int	len;
+		Tcl_Size	len;
 
 		TEST_OK(Tcl_ListObjLength(interp, cx->actions, &len));
 		idx += len;
@@ -1901,7 +1918,7 @@ static int template_actions(struct template_cx* cx, Tcl_Obj* template, enum acti
 				TEST_OK(emit_action(cx, PUSH_TARGET, Tcl_DuplicateObj(template), NULL));
 				TEST_OK(Tcl_DictObjFirst(interp, val, &search, &k, &v, &done));
 				for (; !done; Tcl_DictObjNext(&search, &k, &v, &done)) {
-					int				len;
+					Tcl_Size		len;
 					enum json_types	stype;
 					const char*		s = Tcl_GetStringFromObj(k, &len);
 
@@ -1947,7 +1964,8 @@ free_search:
 
 		case JSON_ARRAY:
 			{
-				int			i, oc;
+				int			i;
+                Tcl_Size	oc;
 				Tcl_Obj**	ov;
 				Tcl_Obj*	arr_elem = NULL;
 
@@ -2026,7 +2044,8 @@ int build_template_actions(Tcl_Interp* interp, Tcl_Obj* template, Tcl_Obj** acti
 		replace_tclobj(&cx.actions, Tcl_NewListObj(0, NULL));
 
 		{ // Find max cx stack depth
-			int			depth=0, actionc, i;
+			int			depth=0, i;
+            Tcl_Size	actionc;
 			Tcl_Obj**	actionv;
 
 			TEST_OK_LABEL(actions_done, retcode,
@@ -2100,7 +2119,8 @@ int apply_template_actions(Tcl_Interp* interp, Tcl_Obj* template, Tcl_Obj* actio
 	int			slotslen = 0;
 	int			retcode = TCL_OK;
 	Tcl_Obj**	actionv;
-	int			actionc, i;
+    Tcl_Size	actionc;
+	int			i;
 #define STATIC_STACK	8
 	Tcl_Obj*	stackstack[STATIC_STACK];
 	Tcl_Obj**	stack = NULL;
@@ -2177,7 +2197,7 @@ int apply_template_actions(Tcl_Interp* interp, Tcl_Obj* template, Tcl_Obj* actio
 					fill_slot(slots, slot, l->json_null);
 				} else {
 					const char*	str;
-					int			len;
+					Tcl_Size	len;
 					Tcl_Obj*	jval=NULL;
 
 					str = Tcl_GetStringFromObj(subst_val, &len);
@@ -2515,7 +2535,7 @@ finally:
 static int jsonLength(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[]) //{{{
 {
 	struct interp_cx*	l = (struct interp_cx*)cdata;
-	int					length;
+	Tcl_Size			length;
 	int					retval = TCL_OK;
 	Tcl_Obj*			target = NULL;
 	Tcl_Obj*			path = NULL;
@@ -2661,7 +2681,7 @@ endoptions:
 
 	if (objc >= argbase+2) {
 		const char*		s = NULL;
-		int				l;
+		Tcl_Size		l;
 
 		TEST_OK_LABEL(finally, code, resolve_path(interp, objv[argbase], objv+argbase+1, objc-(argbase+1), &target, 0, 1, def));
 		s = Tcl_GetStringFromObj(objv[objc-1], &l);
@@ -2882,7 +2902,7 @@ static int jsonString(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *c
 #if DEDUP
 	struct interp_cx*	l = (struct interp_cx*)cdata;
 #endif
-	int					len;
+	Tcl_Size			len;
 	const char*			s;
 	enum json_types		type;
 	int					retval = TCL_OK;
@@ -2941,7 +2961,7 @@ finally:
 static int jsonObject(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[]) //{{{
 {
 	int			retval = TCL_OK;
-	int			oc;
+	Tcl_Size	oc;
 	Tcl_Obj**	ov;
 	Tcl_Obj*	res = NULL;
 
@@ -2961,8 +2981,9 @@ finally:
 //}}}
 static int jsonArray(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[]) //{{{
 {
-	int			i, ac, retval = TCL_OK;;
-	Tcl_Obj**	av;
+	int			i, retval = TCL_OK;;
+	Tcl_Size	ac;
+    Tcl_Obj**	av;
 	Tcl_Obj*	elem = NULL;
 	Tcl_Obj*	val = NULL;
 
@@ -3283,7 +3304,8 @@ static int jsonValid(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *co
 			case O_EXTENSIONS:
 				{
 					Tcl_Obj**		ov;
-					int				oc, idx;
+					Tcl_Size		oc;
+                    int				idx;
 
 					extensions = 0;		// An explicit list was supplied, reset the extensions
 
@@ -3700,13 +3722,13 @@ static int jsonNRObj(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *co
 				unsigned long	addr;
 				Tcl_Obj*		obj = NULL;
 				const char*		s;
-				int				len;
+				Tcl_Size		len;
 
 				CHECK_ARGS(2, "addr");
 				TEST_OK(Tcl_GetLongFromObj(interp, objv[2], (long*)&addr));
 				obj = (Tcl_Obj*)addr;
 				s = Tcl_GetStringFromObj(obj, &len);
-				fprintf(stderr, "\tLeaked obj: %p[%d] len %d: \"%s\"\n", obj, obj->refCount, len, len < 256 ? s : "<too long>");
+				fprintf(stderr, "\tLeaked obj: %p[%ld] len %ld: \"%s\"\n", obj, obj->refCount, len, len < 256 ? s : "<too long>");
 
 				break;
 			}
diff --git a/generic/rl_json.h b/generic/rl_json.h
index 3f91120..619457a 100644
--- a/generic/rl_json.h
+++ b/generic/rl_json.h
@@ -69,13 +69,13 @@ enum cbor_mt {
 // Stubs exported API
 
 #ifdef USE_RL_JSON_STUBS
-EXTERN CONST char* Rl_jsonInitStubs _ANSI_ARGS_((Tcl_Interp* interp, CONST char* version, int exact));
+EXTERN CONST char* Rl_jsonInitStubs (Tcl_Interp* interp, CONST char* version, int exact);
 #else
 #	define Rl_jsonInitStubs(interp, version, exact) Tcl_PkgRequire(interp, "rl_json", version, exact)
 #endif
 #include "rl_jsonDecls.h"
 
-EXTERN int Rl_json_Init _ANSI_ARGS_((Tcl_Interp* interp));
-EXTERN int Rl_json_SafeInit _ANSI_ARGS_((Tcl_Interp* interp));
+EXTERN int Rl_json_Init (Tcl_Interp* interp);
+EXTERN int Rl_json_SafeInit (Tcl_Interp* interp);
 
 #endif
diff --git a/generic/rl_jsonDecls.h b/generic/rl_jsonDecls.h
index 0182390..47dee87 100644
--- a/generic/rl_jsonDecls.h
+++ b/generic/rl_jsonDecls.h
@@ -56,7 +56,7 @@ EXTERN int		JSON_SetJArrayObj(Tcl_Interp*interp, Tcl_Obj*obj,
 				int objc, Tcl_Obj*objv[]);
 /* 16 */
 EXTERN int		JSON_JArrayObjGetElements(Tcl_Interp*interp,
-				Tcl_Obj*arrayObj, int*objc, Tcl_Obj***objv);
+				Tcl_Obj*arrayObj, Tcl_Size*objc, Tcl_Obj***objv);
 /* 17 */
 EXTERN int		JSON_JArrayObjIndex(Tcl_Interp*interp,
 				Tcl_Obj*arrayObj, int index, Tcl_Obj**elem);
@@ -100,7 +100,7 @@ EXTERN int		JSON_Type(Tcl_Interp*interp, Tcl_Obj*obj,
 				enum json_types*type);
 /* 29 */
 EXTERN int		JSON_Length(Tcl_Interp*interp, Tcl_Obj*obj,
-				Tcl_Obj* path /* can be NULL */, int*length);
+				Tcl_Obj* path /* can be NULL */, Tcl_Size*length);
 /* 30 */
 EXTERN int		JSON_Keys(Tcl_Interp*interp, Tcl_Obj*obj,
 				Tcl_Obj* path /* can be NULL */,
@@ -155,7 +155,7 @@ typedef struct Rl_jsonStubs {
     int (*jSON_JArrayObjAppendElement) (Tcl_Interp*interp, Tcl_Obj*arrayObj, Tcl_Obj*elem); /* 13 */
     int (*jSON_JArrayObjAppendList) (Tcl_Interp*interp, Tcl_Obj*arrayObj, Tcl_Obj* elems /* a JArrayObj or ListObj */); /* 14 */
     int (*jSON_SetJArrayObj) (Tcl_Interp*interp, Tcl_Obj*obj, int objc, Tcl_Obj*objv[]); /* 15 */
-    int (*jSON_JArrayObjGetElements) (Tcl_Interp*interp, Tcl_Obj*arrayObj, int*objc, Tcl_Obj***objv); /* 16 */
+    int (*jSON_JArrayObjGetElements) (Tcl_Interp*interp, Tcl_Obj*arrayObj, Tcl_Size*objc, Tcl_Obj***objv); /* 16 */
     int (*jSON_JArrayObjIndex) (Tcl_Interp*interp, Tcl_Obj*arrayObj, int index, Tcl_Obj**elem); /* 17 */
     int (*jSON_JArrayObjReplace) (Tcl_Interp*interp, Tcl_Obj*arrayObj, int first, int count, int objc, Tcl_Obj*objv[]); /* 18 */
     int (*jSON_Get) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, Tcl_Obj**res); /* 19 */
@@ -168,7 +168,7 @@ typedef struct Rl_jsonStubs {
     int (*jSON_Template) (Tcl_Interp*interp, Tcl_Obj*template, Tcl_Obj*dict, Tcl_Obj**res); /* 26 */
     int (*jSON_IsNULL) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, int*isnull); /* 27 */
     int (*jSON_Type) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, enum json_types*type); /* 28 */
-    int (*jSON_Length) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, int*length); /* 29 */
+    int (*jSON_Length) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, Tcl_Size*length); /* 29 */
     int (*jSON_Keys) (Tcl_Interp*interp, Tcl_Obj*obj, Tcl_Obj* path /* can be NULL */, Tcl_Obj**keyslist); /* 30 */
     int (*jSON_Decode) (Tcl_Interp*interp, Tcl_Obj*bytes, Tcl_Obj*encoding, Tcl_Obj**decodedstring); /* 31 */
     int (*jSON_Foreach) (Tcl_Interp*interp, Tcl_Obj*iterators, JSON_ForeachBody*body, enum collecting_mode collect, Tcl_Obj**res, ClientData cdata); /* 32 */
diff --git a/generic/rl_jsonInt.h b/generic/rl_jsonInt.h
index 613b6bb..124d3eb 100644
--- a/generic/rl_jsonInt.h
+++ b/generic/rl_jsonInt.h
@@ -50,11 +50,11 @@ struct parse_context {
 };
 
 struct foreach_iterator {
-	int				data_c;
+	Tcl_Size		data_c;
 	Tcl_Obj**		data_v;
 	int				data_i;
 	Tcl_Obj*		varlist;
-	int				var_c;
+	Tcl_Size		var_c;
 	Tcl_Obj**		var_v;
 	int				is_array;
 
